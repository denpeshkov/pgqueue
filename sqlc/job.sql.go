// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: job.sql

package sqlc

import (
	"context"
)

const jobGetAvailable = `-- name: JobGetAvailable :many
WITH available_jobs AS (
    SELECT id
    FROM job
    WHERE state = 'available'::job_state
    ORDER BY id ASC
    LIMIT $1::integer
    FOR UPDATE SKIP LOCKED
)
UPDATE job
SET state = 'running'::job_state
FROM available_jobs
WHERE job.id = available_jobs.id
RETURNING job.id, job.state, job.description
`

func (q *Queries) JobGetAvailable(ctx context.Context, batchSize int32) ([]Job, error) {
	rows, err := q.db.Query(ctx, jobGetAvailable, batchSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(&i.ID, &i.State, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const jobInsert = `-- name: JobInsert :one
INSERT INTO job(state, description)
VALUES ($1::job_state, $2::jsonb)
RETURNING id
`

type JobInsertParams struct {
	State JobState
	Args  []byte
}

func (q *Queries) JobInsert(ctx context.Context, arg JobInsertParams) (int64, error) {
	row := q.db.QueryRow(ctx, jobInsert, arg.State, arg.Args)
	var id int64
	err := row.Scan(&id)
	return id, err
}
